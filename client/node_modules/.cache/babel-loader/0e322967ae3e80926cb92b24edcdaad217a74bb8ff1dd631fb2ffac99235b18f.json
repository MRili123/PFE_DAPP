{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport { initWeb3, getContract } from \"./web3Utils\";\nexport const useWeb3 = () => {\n  _s();\n  // React state to track Web3 connection status\n  const [web3State, setWeb3State] = useState({\n    web3: null,\n    accounts: [],\n    networkId: null,\n    currentAccount: \"\",\n    isConnected: false\n  });\n\n  // State to store contract instances for each exercise\n  const [contracts, setContracts] = useState({});\n\n  // Loading state to show when connecting to blockchain\n  const [loading, setLoading] = useState(true);\n\n  // Error state to display connection problems\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const initializeWeb3 = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Connect to blockchain (Ganache or MetaMask)\n        console.log(\"Connecting to blockchain...\");\n        const web3Instance = await initWeb3();\n\n        // Get list of available accounts (Ethereum addresses)\n        const accounts = await web3Instance.eth.getAccounts();\n        console.log(\"Found accounts:\", accounts);\n\n        // Get network ID to verify we're on correct blockchain\n        const networkId = await web3Instance.eth.net.getId();\n        console.log(\"Connected to network:\", networkId);\n\n        // Update React state with connection info\n        setWeb3State({\n          web3: web3Instance,\n          accounts,\n          networkId: Number(networkId),\n          currentAccount: accounts[0],\n          isConnected: accounts.length > 0\n        });\n\n        // Load all contract instances for the 8 exercises\n        await loadContracts(web3Instance);\n      } catch (err) {\n        console.error(\"Failed to initialize Web3:\", err);\n        setError(err instanceof Error ? err.message : \"Failed to connect to blockchain\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeWeb3();\n  }, []);\n\n  /**\r\n   * Load contract instances for all 8 exercises\r\n   * This creates JavaScript objects that can call smart contract functions\r\n   */\n  const loadContracts = async web3 => {\n    try {\n      console.log(\"Loading contract instances...\");\n\n      // List of all contract names from our exercises (UPDATED FOR NEW STRUCTURE)\n      const contractNames = [\"AdditionContract\", \"Convertisseur\", \"GestionChaines\", \"Payment\", \"Rectangle\", \"SommeTableau\", \"VerificateurParite\", \"VerificateurPositif\"];\n\n      // Create contract instances for each exercise\n      const contractInstances = {};\n      for (const contractName of contractNames) {\n        try {\n          // Import contract ABI artifact\n          const contractArtifact = await import(`../contracts/${contractName}.json`);\n\n          // Load contract ABI and create instance\n          const contractInstance = await getContract(web3, contractArtifact);\n          contractInstances[contractName] = contractInstance;\n          console.log(`Loaded ${contractName} contract`);\n        } catch (err) {\n          console.warn(`Failed to load ${contractName}:`, err);\n          // Continue loading other contracts even if one fails\n        }\n      }\n      setContracts(contractInstances);\n      console.log(\"All contracts loaded successfully\");\n    } catch (err) {\n      console.error(\" Failed to load contracts:\", err);\n      setError(\"Failed to load smart contracts\");\n    }\n  };\n  const refreshAccounts = async () => {\n    if (web3State.web3) {\n      try {\n        const accounts = await web3State.web3.eth.getAccounts();\n        setWeb3State(prev => ({\n          ...prev,\n          accounts,\n          currentAccount: accounts[0],\n          isConnected: accounts.length > 0\n        }));\n      } catch (err) {\n        console.error(\"Failed to refresh accounts:\", err);\n      }\n    }\n  };\n  return {\n    ...web3State,\n    contracts,\n    loading,\n    error,\n    refreshAccounts,\n    hasContracts: Object.keys(contracts).length > 0,\n    isReady: web3State.isConnected && Object.keys(contracts).length > 0\n  };\n};\n_s(useWeb3, \"lvu4wVBU1w2T7J7Cqe/9qPiSYBQ=\");","map":{"version":3,"names":["useState","useEffect","Web3","initWeb3","getContract","useWeb3","_s","web3State","setWeb3State","web3","accounts","networkId","currentAccount","isConnected","contracts","setContracts","loading","setLoading","error","setError","initializeWeb3","console","log","web3Instance","eth","getAccounts","net","getId","Number","length","loadContracts","err","Error","message","contractNames","contractInstances","contractName","contractArtifact","contractInstance","warn","refreshAccounts","prev","hasContracts","Object","keys","isReady"],"sources":["C:/Users/ilias/OneDrive/Bureau/contract_test/client/src/hook/web3Utils.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport { initWeb3, getContract } from \"./web3Utils\";\r\n\r\n\r\nexport const useWeb3 = () => {\r\n  // React state to track Web3 connection status\r\n  const [web3State, setWeb3State] = useState({\r\n    web3: null,\r\n    accounts: [],\r\n    networkId: null,\r\n    currentAccount: \"\",\r\n    isConnected: false,\r\n  });\r\n\r\n  // State to store contract instances for each exercise\r\n  const [contracts, setContracts] = useState({});\r\n\r\n  // Loading state to show when connecting to blockchain\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Error state to display connection problems\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const initializeWeb3 = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        // Connect to blockchain (Ganache or MetaMask)\r\n        console.log(\"Connecting to blockchain...\");\r\n        const web3Instance = await initWeb3();\r\n\r\n        // Get list of available accounts (Ethereum addresses)\r\n        const accounts = await web3Instance.eth.getAccounts();\r\n        console.log(\"Found accounts:\", accounts);\r\n\r\n        // Get network ID to verify we're on correct blockchain\r\n        const networkId = await web3Instance.eth.net.getId();\r\n        console.log(\"Connected to network:\", networkId);\r\n\r\n        // Update React state with connection info\r\n        setWeb3State({\r\n          web3: web3Instance,\r\n          accounts,\r\n          networkId: Number(networkId),\r\n          currentAccount: accounts[0],\r\n          isConnected: accounts.length > 0,\r\n        });\r\n\r\n        // Load all contract instances for the 8 exercises\r\n        await loadContracts(web3Instance);\r\n      } catch (err) {\r\n        console.error(\"Failed to initialize Web3:\", err);\r\n        setError(err instanceof Error ? err.message : \"Failed to connect to blockchain\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeWeb3();\r\n  }, []);\r\n\r\n  /**\r\n   * Load contract instances for all 8 exercises\r\n   * This creates JavaScript objects that can call smart contract functions\r\n   */\r\n  const loadContracts = async (web3) => {\r\n    try {\r\n      console.log(\"Loading contract instances...\");\r\n\r\n      // List of all contract names from our exercises (UPDATED FOR NEW STRUCTURE)\r\n      const contractNames = [\r\n        \"AdditionContract\",\r\n        \"Convertisseur\",\r\n        \"GestionChaines\",\r\n        \"Payment\",\r\n        \"Rectangle\",\r\n        \"SommeTableau\",\r\n        \"VerificateurParite\",\r\n        \"VerificateurPositif\",\r\n      ];\r\n\r\n      // Create contract instances for each exercise\r\n      const contractInstances = {};\r\n\r\n      for (const contractName of contractNames) {\r\n        try {\r\n          // Import contract ABI artifact\r\n          const contractArtifact = await import(`../contracts/${contractName}.json`);\r\n\r\n          // Load contract ABI and create instance\r\n          const contractInstance = await getContract(web3, contractArtifact);\r\n          contractInstances[contractName] = contractInstance;\r\n          console.log(`Loaded ${contractName} contract`);\r\n        } catch (err) {\r\n          console.warn(`Failed to load ${contractName}:`, err);\r\n          // Continue loading other contracts even if one fails\r\n        }\r\n      }\r\n\r\n      setContracts(contractInstances);\r\n      console.log(\"All contracts loaded successfully\");\r\n    } catch (err) {\r\n      console.error(\" Failed to load contracts:\", err);\r\n      setError(\"Failed to load smart contracts\");\r\n    }\r\n  };\r\n\r\n  const refreshAccounts = async () => {\r\n    if (web3State.web3) {\r\n      try {\r\n        const accounts = await web3State.web3.eth.getAccounts();\r\n        setWeb3State((prev) => ({\r\n          ...prev,\r\n          accounts,\r\n          currentAccount: accounts[0],\r\n          isConnected: accounts.length > 0,\r\n        }));\r\n      } catch (err) {\r\n        console.error(\"Failed to refresh accounts:\", err);\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    ...web3State,\r\n    contracts,\r\n    loading,\r\n    error,\r\n    refreshAccounts,\r\n\r\n    hasContracts: Object.keys(contracts).length > 0,\r\n    isReady: web3State.isConnected && Object.keys(contracts).length > 0,\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,aAAa;AAGnD,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC;IACzCS,IAAI,EAAE,IAAI;IACVC,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE,IAAI;IACfC,cAAc,EAAE,EAAE;IAClBC,WAAW,EAAE;EACf,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE9C;EACA,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMmB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChBE,QAAQ,CAAC,IAAI,CAAC;;QAEd;QACAE,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC1C,MAAMC,YAAY,GAAG,MAAMpB,QAAQ,CAAC,CAAC;;QAErC;QACA,MAAMO,QAAQ,GAAG,MAAMa,YAAY,CAACC,GAAG,CAACC,WAAW,CAAC,CAAC;QACrDJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEZ,QAAQ,CAAC;;QAExC;QACA,MAAMC,SAAS,GAAG,MAAMY,YAAY,CAACC,GAAG,CAACE,GAAG,CAACC,KAAK,CAAC,CAAC;QACpDN,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEX,SAAS,CAAC;;QAE/C;QACAH,YAAY,CAAC;UACXC,IAAI,EAAEc,YAAY;UAClBb,QAAQ;UACRC,SAAS,EAAEiB,MAAM,CAACjB,SAAS,CAAC;UAC5BC,cAAc,EAAEF,QAAQ,CAAC,CAAC,CAAC;UAC3BG,WAAW,EAAEH,QAAQ,CAACmB,MAAM,GAAG;QACjC,CAAC,CAAC;;QAEF;QACA,MAAMC,aAAa,CAACP,YAAY,CAAC;MACnC,CAAC,CAAC,OAAOQ,GAAG,EAAE;QACZV,OAAO,CAACH,KAAK,CAAC,4BAA4B,EAAEa,GAAG,CAAC;QAChDZ,QAAQ,CAACY,GAAG,YAAYC,KAAK,GAAGD,GAAG,CAACE,OAAO,GAAG,iCAAiC,CAAC;MAClF,CAAC,SAAS;QACRhB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;AACA;EACE,MAAMU,aAAa,GAAG,MAAOrB,IAAI,IAAK;IACpC,IAAI;MACFY,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;;MAE5C;MACA,MAAMY,aAAa,GAAG,CACpB,kBAAkB,EAClB,eAAe,EACf,gBAAgB,EAChB,SAAS,EACT,WAAW,EACX,cAAc,EACd,oBAAoB,EACpB,qBAAqB,CACtB;;MAED;MACA,MAAMC,iBAAiB,GAAG,CAAC,CAAC;MAE5B,KAAK,MAAMC,YAAY,IAAIF,aAAa,EAAE;QACxC,IAAI;UACF;UACA,MAAMG,gBAAgB,GAAG,MAAM,MAAM,CAAC,gBAAgBD,YAAY,OAAO,CAAC;;UAE1E;UACA,MAAME,gBAAgB,GAAG,MAAMlC,WAAW,CAACK,IAAI,EAAE4B,gBAAgB,CAAC;UAClEF,iBAAiB,CAACC,YAAY,CAAC,GAAGE,gBAAgB;UAClDjB,OAAO,CAACC,GAAG,CAAC,UAAUc,YAAY,WAAW,CAAC;QAChD,CAAC,CAAC,OAAOL,GAAG,EAAE;UACZV,OAAO,CAACkB,IAAI,CAAC,kBAAkBH,YAAY,GAAG,EAAEL,GAAG,CAAC;UACpD;QACF;MACF;MAEAhB,YAAY,CAACoB,iBAAiB,CAAC;MAC/Bd,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAClD,CAAC,CAAC,OAAOS,GAAG,EAAE;MACZV,OAAO,CAACH,KAAK,CAAC,4BAA4B,EAAEa,GAAG,CAAC;MAChDZ,QAAQ,CAAC,gCAAgC,CAAC;IAC5C;EACF,CAAC;EAED,MAAMqB,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAIjC,SAAS,CAACE,IAAI,EAAE;MAClB,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMH,SAAS,CAACE,IAAI,CAACe,GAAG,CAACC,WAAW,CAAC,CAAC;QACvDjB,YAAY,CAAEiC,IAAI,KAAM;UACtB,GAAGA,IAAI;UACP/B,QAAQ;UACRE,cAAc,EAAEF,QAAQ,CAAC,CAAC,CAAC;UAC3BG,WAAW,EAAEH,QAAQ,CAACmB,MAAM,GAAG;QACjC,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZV,OAAO,CAACH,KAAK,CAAC,6BAA6B,EAAEa,GAAG,CAAC;MACnD;IACF;EACF,CAAC;EAED,OAAO;IACL,GAAGxB,SAAS;IACZO,SAAS;IACTE,OAAO;IACPE,KAAK;IACLsB,eAAe;IAEfE,YAAY,EAAEC,MAAM,CAACC,IAAI,CAAC9B,SAAS,CAAC,CAACe,MAAM,GAAG,CAAC;IAC/CgB,OAAO,EAAEtC,SAAS,CAACM,WAAW,IAAI8B,MAAM,CAACC,IAAI,CAAC9B,SAAS,CAAC,CAACe,MAAM,GAAG;EACpE,CAAC;AACH,CAAC;AAACvB,EAAA,CAnIWD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}