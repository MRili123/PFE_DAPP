{"ast":null,"code":"// src/utils/web3Utils.js\n\nimport Web3 from \"web3\";\nconst GANACHE_URL = \"http://127.0.0.1:7545\";\n\n/**\r\n * Initialize Web3 connection\r\n * Tries MetaMask first, falls back to Ganache local blockchain\r\n */\nexport const initWeb3 = async () => {\n  if (window.ethereum) {\n    try {\n      // Request access to MetaMask accounts\n      await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      return new Web3(window.ethereum);\n    } catch (err) {\n      console.warn(\"MetaMask access denied. Falling back to Ganache.\", err);\n    }\n  }\n\n  // Fallback: Connect to Ganache local blockchain\n  try {\n    const web3 = new Web3(new Web3.providers.HttpProvider(GANACHE_URL));\n    await web3.eth.net.isListening();\n    return web3;\n  } catch (err) {\n    console.error(\"Failed to connect to Ganache:\", err);\n    throw new Error(\"Cannot connect to blockchain. Make sure Ganache is running on port 7545\");\n  }\n};\n\n/**\r\n * Create a contract instance from ABI and network deployment info\r\n */\nexport const getContract = async (web3, contractArtifact) => {\n  try {\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = contractArtifact.networks[networkId.toString()];\n    if (!deployedNetwork) {\n      throw new Error(`Contract not deployed on network ID ${networkId}`);\n    }\n    return new web3.eth.Contract(contractArtifact.abi, deployedNetwork.address);\n  } catch (err) {\n    console.error(\"Error loading contract:\", err);\n    throw err;\n  }\n};\n\n/**\r\n * Get list of accounts from web3 provider\r\n */\nexport const getAccounts = async web3 => {\n  const accounts = await web3.eth.getAccounts();\n  if (accounts.length === 0) {\n    throw new Error(\"No accounts found. Connect your wallet or unlock MetaMask.\");\n  }\n  return accounts;\n};\n\n/**\r\n * Get Ether balance of an account\r\n */\nexport const getBalance = async (web3, address) => {\n  const balanceWei = await web3.eth.getBalance(address);\n  const balanceEther = web3.utils.fromWei(balanceWei, \"ether\");\n  return {\n    wei: balanceWei,\n    ether: balanceEther,\n    formatted: `${parseFloat(balanceEther).toFixed(4)} ETH`\n  };\n};\n\n/**\r\n * Call a contract's read-only method\r\n */\nexport const callContractFunction = async (contract, functionName, params = [], fromAccount = null) => {\n  try {\n    return await contract.methods[functionName](...params).call({\n      from: fromAccount\n    });\n  } catch (err) {\n    console.error(`Error calling contract function ${functionName}:`, err);\n    throw err;\n  }\n};\n\n/**\r\n * Send a transaction to contract (state-changing)\r\n */\nexport const sendContractTransaction = async (contract, functionName, params = [], fromAccount, value = 0) => {\n  try {\n    const transaction = contract.methods[functionName](...params);\n    const gasEstimate = await transaction.estimateGas({\n      from: fromAccount,\n      value\n    });\n    const receipt = await transaction.send({\n      from: fromAccount,\n      gas: Math.floor(gasEstimate * 1.1),\n      value\n    });\n    return receipt;\n  } catch (err) {\n    console.error(\"Error sending contract transaction:\", err);\n    throw err;\n  }\n};\n\n/**\r\n * Utility: Validate Ethereum address\r\n */\nexport const isValidAddress = address => Web3.utils.isAddress(address);\n\n/**\r\n * Utility: Convert Wei to Ether\r\n */\nexport const weiToEther = wei => {\n  if (!wei) return \"0\";\n  try {\n    return Web3.utils.fromWei(wei.toString(), \"ether\");\n  } catch {\n    return \"0\";\n  }\n};\n\n/**\r\n * Utility: Convert Ether to Wei\r\n */\nexport const etherToWei = ether => Web3.utils.toWei(ether.toString(), \"ether\");\n\n/**\r\n * Shorten Ethereum address for display: 0x1234...abcd\r\n */\nexport const shortenAddress = address => {\n  if (!address) return \"\";\n  return `${address.slice(0, 6)}...${address.slice(-4)}`;\n};\n\n/**\r\n * Handle common Web3 errors to friendly messages\r\n */\nexport const handleWeb3Error = error => {\n  var _error$message, _error$message2, _error$message3;\n  if (!error) return \"Unknown error\";\n  if (error.code === 4001) return \"Transaction cancelled by user\";\n  if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes(\"insufficient funds\")) return \"Insufficient funds for transaction\";\n  if ((_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes(\"gas required exceeds allowance\")) return \"Transaction requires more gas than allowed\";\n  if ((_error$message3 = error.message) !== null && _error$message3 !== void 0 && _error$message3.includes(\"revert\")) return \"Transaction reverted - check contract conditions\";\n  return error.message || \"Unknown blockchain error\";\n};\nexport default {\n  initWeb3,\n  getContract,\n  getAccounts,\n  getBalance,\n  callContractFunction,\n  sendContractTransaction,\n  isValidAddress,\n  weiToEther,\n  etherToWei,\n  shortenAddress,\n  handleWeb3Error\n};","map":{"version":3,"names":["Web3","GANACHE_URL","initWeb3","window","ethereum","request","method","err","console","warn","web3","providers","HttpProvider","eth","net","isListening","error","Error","getContract","contractArtifact","networkId","getId","deployedNetwork","networks","toString","Contract","abi","address","getAccounts","accounts","length","getBalance","balanceWei","balanceEther","utils","fromWei","wei","ether","formatted","parseFloat","toFixed","callContractFunction","contract","functionName","params","fromAccount","methods","call","from","sendContractTransaction","value","transaction","gasEstimate","estimateGas","receipt","send","gas","Math","floor","isValidAddress","isAddress","weiToEther","etherToWei","toWei","shortenAddress","slice","handleWeb3Error","_error$message","_error$message2","_error$message3","code","message","includes"],"sources":["C:/Users/ilias/OneDrive/Bureau/contract_test/client/src/utils/web3Utils.js"],"sourcesContent":["// src/utils/web3Utils.js\r\n\r\nimport Web3 from \"web3\";\r\n\r\nconst GANACHE_URL = \"http://127.0.0.1:7545\";\r\n\r\n/**\r\n * Initialize Web3 connection\r\n * Tries MetaMask first, falls back to Ganache local blockchain\r\n */\r\nexport const initWeb3 = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      // Request access to MetaMask accounts\r\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n      return new Web3(window.ethereum);\r\n    } catch (err) {\r\n      console.warn(\"MetaMask access denied. Falling back to Ganache.\", err);\r\n    }\r\n  }\r\n\r\n  // Fallback: Connect to Ganache local blockchain\r\n  try {\r\n    const web3 = new Web3(new Web3.providers.HttpProvider(GANACHE_URL));\r\n    await web3.eth.net.isListening();\r\n    return web3;\r\n  } catch (err) {\r\n    console.error(\"Failed to connect to Ganache:\", err);\r\n    throw new Error(\r\n      \"Cannot connect to blockchain. Make sure Ganache is running on port 7545\"\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Create a contract instance from ABI and network deployment info\r\n */\r\nexport const getContract = async (web3, contractArtifact) => {\r\n  try {\r\n    const networkId = await web3.eth.net.getId();\r\n    const deployedNetwork = contractArtifact.networks[networkId.toString()];\r\n\r\n    if (!deployedNetwork) {\r\n      throw new Error(`Contract not deployed on network ID ${networkId}`);\r\n    }\r\n\r\n    return new web3.eth.Contract(contractArtifact.abi, deployedNetwork.address);\r\n  } catch (err) {\r\n    console.error(\"Error loading contract:\", err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n/**\r\n * Get list of accounts from web3 provider\r\n */\r\nexport const getAccounts = async (web3) => {\r\n  const accounts = await web3.eth.getAccounts();\r\n\r\n  if (accounts.length === 0) {\r\n    throw new Error(\"No accounts found. Connect your wallet or unlock MetaMask.\");\r\n  }\r\n\r\n  return accounts;\r\n};\r\n\r\n/**\r\n * Get Ether balance of an account\r\n */\r\nexport const getBalance = async (web3, address) => {\r\n  const balanceWei = await web3.eth.getBalance(address);\r\n  const balanceEther = web3.utils.fromWei(balanceWei, \"ether\");\r\n\r\n  return {\r\n    wei: balanceWei,\r\n    ether: balanceEther,\r\n    formatted: `${parseFloat(balanceEther).toFixed(4)} ETH`,\r\n  };\r\n};\r\n\r\n/**\r\n * Call a contract's read-only method\r\n */\r\nexport const callContractFunction = async (\r\n  contract,\r\n  functionName,\r\n  params = [],\r\n  fromAccount = null\r\n) => {\r\n  try {\r\n    return await contract.methods[functionName](...params).call({ from: fromAccount });\r\n  } catch (err) {\r\n    console.error(`Error calling contract function ${functionName}:`, err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n/**\r\n * Send a transaction to contract (state-changing)\r\n */\r\nexport const sendContractTransaction = async (\r\n  contract,\r\n  functionName,\r\n  params = [],\r\n  fromAccount,\r\n  value = 0\r\n) => {\r\n  try {\r\n    const transaction = contract.methods[functionName](...params);\r\n    const gasEstimate = await transaction.estimateGas({ from: fromAccount, value });\r\n\r\n    const receipt = await transaction.send({\r\n      from: fromAccount,\r\n      gas: Math.floor(gasEstimate * 1.1),\r\n      value,\r\n    });\r\n\r\n    return receipt;\r\n  } catch (err) {\r\n    console.error(\"Error sending contract transaction:\", err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n/**\r\n * Utility: Validate Ethereum address\r\n */\r\nexport const isValidAddress = (address) => Web3.utils.isAddress(address);\r\n\r\n/**\r\n * Utility: Convert Wei to Ether\r\n */\r\nexport const weiToEther = (wei) => {\r\n  if (!wei) return \"0\";\r\n  try {\r\n    return Web3.utils.fromWei(wei.toString(), \"ether\");\r\n  } catch {\r\n    return \"0\";\r\n  }\r\n};\r\n\r\n/**\r\n * Utility: Convert Ether to Wei\r\n */\r\nexport const etherToWei = (ether) => Web3.utils.toWei(ether.toString(), \"ether\");\r\n\r\n/**\r\n * Shorten Ethereum address for display: 0x1234...abcd\r\n */\r\nexport const shortenAddress = (address) => {\r\n  if (!address) return \"\";\r\n  return `${address.slice(0, 6)}...${address.slice(-4)}`;\r\n};\r\n\r\n/**\r\n * Handle common Web3 errors to friendly messages\r\n */\r\nexport const handleWeb3Error = (error) => {\r\n  if (!error) return \"Unknown error\";\r\n\r\n  if (error.code === 4001) return \"Transaction cancelled by user\";\r\n  if (error.message?.includes(\"insufficient funds\")) return \"Insufficient funds for transaction\";\r\n  if (error.message?.includes(\"gas required exceeds allowance\"))\r\n    return \"Transaction requires more gas than allowed\";\r\n  if (error.message?.includes(\"revert\")) return \"Transaction reverted - check contract conditions\";\r\n\r\n  return error.message || \"Unknown blockchain error\";\r\n};\r\n\r\nexport default {\r\n  initWeb3,\r\n  getContract,\r\n  getAccounts,\r\n  getBalance,\r\n  callContractFunction,\r\n  sendContractTransaction,\r\n  isValidAddress,\r\n  weiToEther,\r\n  etherToWei,\r\n  shortenAddress,\r\n  handleWeb3Error,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}