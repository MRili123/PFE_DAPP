{"ast":null,"code":"/**\r\n * WEB3 UTILITIES\r\n *\r\n * This file contains utility functions for connecting React frontend\r\n * to Ethereum blockchain via Web3.js\r\n */\n\nimport Web3 from \"web3\";\n\n// Ganache local blockchain configuration\nconst GANACHE_URL = \"http://127.0.0.1:7545\";\n\n/**\r\n * Initialize Web3 connection\r\n */\nexport const initWeb3 = async () => {\n  let web3;\n\n  // Check if MetaMask is available\n  if (window.ethereum) {\n    try {\n      // Request account access\n      await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      web3 = new Web3(window.ethereum);\n      return web3;\n    } catch {\n      console.log(\"MetaMask connection rejected, falling back to Ganache\");\n      // Fall through to Ganache connection\n    }\n  }\n\n  // Fallback to Ganache local network\n  try {\n    web3 = new Web3(new Web3.providers.HttpProvider(GANACHE_URL));\n\n    // Test connection\n    await web3.eth.net.isListening();\n    return web3;\n  } catch (error) {\n    console.log(\"Failed to connect to Ganache:\", error);\n    throw new Error(\"Cannot connect to blockchain. Make sure Ganache is running on port 7545\");\n  }\n};\n\n/**\r\n * Get contract instance from ABI and network info\r\n */\nexport const getContract = async (web3, contractArtifact) => {\n  try {\n    // Get current network ID\n    const networkId = await web3.eth.net.getId();\n\n    // Get contract deployment info for this network\n    const deployedNetwork = contractArtifact.networks[networkId.toString()];\n    if (!deployedNetwork) {\n      throw new Error(`Contract not deployed on network ${networkId}`);\n    }\n\n    // Create contract instance\n    const contract = new web3.eth.Contract(contractArtifact.abi, deployedNetwork.address);\n    return {\n      contract,\n      address: deployedNetwork.address,\n      networkId: networkId.toString()\n    };\n  } catch (error) {\n    console.log(\"Error loading contract:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Get user accounts from blockchain\r\n */\nexport const getAccounts = async web3 => {\n  try {\n    const accounts = await web3.eth.getAccounts();\n    if (accounts.length === 0) {\n      throw new Error(\"No accounts found. Make sure wallet is connected.\");\n    }\n    return accounts;\n  } catch (error) {\n    console.log(\"Error getting accounts:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Get account balance in Ether\r\n */\nexport const getBalance = async (web3, address) => {\n  try {\n    // Get balance in Wei\n    const balanceWei = await web3.eth.getBalance(address);\n\n    // Convert Wei to Ether for display\n    const balanceEther = web3.utils.fromWei(balanceWei, \"ether\");\n    return {\n      wei: balanceWei.toString(),\n      ether: balanceEther,\n      formatted: `${parseFloat(balanceEther).toFixed(4)} ETH`\n    };\n  } catch (error) {\n    console.log(\"Error getting balance:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Get blockchain information\r\n */\nexport const getBlockchainInfo = async web3 => {\n  try {\n    var _latestBlock$nonce, _latestBlock$transact;\n    // Get network information\n    const networkId = await web3.eth.net.getId();\n\n    // Determine network URL based on current provider\n    let networkUrl = \"Unknown\";\n    if (web3.currentProvider && typeof web3.currentProvider === \"object\" && \"host\" in web3.currentProvider) {\n      networkUrl = web3.currentProvider.host || \"Unknown\";\n    } else if (web3.currentProvider && typeof web3.currentProvider === \"string\") {\n      networkUrl = web3.currentProvider;\n    } else {\n      // Default for common networks\n      if (networkId.toString() === \"1337\" || networkId.toString() === \"5777\") {\n        networkUrl = \"http://127.0.0.1:7545\"; // Ganache\n      }\n    }\n\n    // Get latest block information with all details\n    const latestBlock = await web3.eth.getBlock(\"latest\", true); // true to get full transaction objects\n\n    return {\n      networkId: networkId.toString(),\n      networkUrl,\n      latestBlock: {\n        number: (latestBlock === null || latestBlock === void 0 ? void 0 : latestBlock.number) || 0,\n        hash: (latestBlock === null || latestBlock === void 0 ? void 0 : latestBlock.hash) || \"\",\n        timestamp: (latestBlock === null || latestBlock === void 0 ? void 0 : latestBlock.timestamp) || 0,\n        parentHash: (latestBlock === null || latestBlock === void 0 ? void 0 : latestBlock.parentHash) || \"\",\n        nonce: (latestBlock === null || latestBlock === void 0 ? void 0 : (_latestBlock$nonce = latestBlock.nonce) === null || _latestBlock$nonce === void 0 ? void 0 : _latestBlock$nonce.toString()) || \"\",\n        transactionCount: (latestBlock === null || latestBlock === void 0 ? void 0 : (_latestBlock$transact = latestBlock.transactions) === null || _latestBlock$transact === void 0 ? void 0 : _latestBlock$transact.length) || 0,\n        miner: (latestBlock === null || latestBlock === void 0 ? void 0 : latestBlock.miner) || \"\",\n        difficulty: (latestBlock === null || latestBlock === void 0 ? void 0 : latestBlock.difficulty) || 0,\n        gasLimit: (latestBlock === null || latestBlock === void 0 ? void 0 : latestBlock.gasLimit) || 0,\n        gasUsed: (latestBlock === null || latestBlock === void 0 ? void 0 : latestBlock.gasUsed) || 0,\n        size: Number((latestBlock === null || latestBlock === void 0 ? void 0 : latestBlock.size) || 0)\n      }\n    };\n  } catch (error) {\n    console.log(\"Error getting blockchain info:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Call contract function (read-only, no gas cost)\r\n */\nexport const callContractFunction = async (contract, functionName, params = [], fromAccount = null) => {\n  try {\n    const result = await contract.methods[functionName](...params).call({\n      from: fromAccount\n    });\n    return result;\n  } catch (error) {\n    console.log(`Error calling contract function ${functionName}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Send transaction to contract (modifies state, costs gas)\r\n */\nexport const sendContractTransaction = async (contract, functionName, params = [], fromAccount, value = 0) => {\n  try {\n    var _fullTransaction$gasP, _fullTransaction$valu;\n    // Prepare transaction\n    const transaction = contract.methods[functionName](...params);\n\n    // Estimate gas needed\n    const gasEstimate = await transaction.estimateGas({\n      from: fromAccount,\n      value: value\n    });\n\n    // Send transaction\n    const receipt = await transaction.send({\n      from: fromAccount,\n      gas: Math.floor(Number(gasEstimate) * 1.1),\n      value: value\n    });\n\n    // Get full transaction details for display\n    const web3 = new Web3(window.ethereum || new Web3.providers.HttpProvider(GANACHE_URL));\n    const fullTransaction = await web3.eth.getTransaction(receipt.transactionHash);\n\n    // Return formatted transaction data that matches TransactionDetails component expectations\n    return {\n      transactionHash: receipt.transactionHash,\n      blockNumber: receipt.blockNumber,\n      gasUsed: receipt.gasUsed,\n      gasPrice: (fullTransaction === null || fullTransaction === void 0 ? void 0 : (_fullTransaction$gasP = fullTransaction.gasPrice) === null || _fullTransaction$gasP === void 0 ? void 0 : _fullTransaction$gasP.toString()) || \"0\",\n      status: receipt.status,\n      from: receipt.from,\n      to: receipt.to,\n      value: (fullTransaction === null || fullTransaction === void 0 ? void 0 : (_fullTransaction$valu = fullTransaction.value) === null || _fullTransaction$valu === void 0 ? void 0 : _fullTransaction$valu.toString()) || \"0\",\n      nonce: fullTransaction !== null && fullTransaction !== void 0 && fullTransaction.nonce ? Number(fullTransaction.nonce) : undefined,\n      transactionIndex: receipt.transactionIndex,\n      cumulativeGasUsed: receipt.cumulativeGasUsed,\n      logs: receipt.logs || [],\n      timestamp: Math.floor(Date.now() / 1000),\n      // Current timestamp as fallback\n      // Keep the original receipt for backward compatibility\n      receipt\n    };\n  } catch (error) {\n    console.log(\"Error sending transaction:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Format transaction for display\r\n */\nexport const formatTransaction = transactionData => {\n  if (!transactionData || !transactionData.receipt) {\n    return null;\n  }\n  const {\n    receipt\n  } = transactionData;\n  return {\n    hash: receipt.transactionHash,\n    block: receipt.blockNumber,\n    gasUsed: receipt.gasUsed.toString(),\n    status: receipt.status ? \"Success\" : \"Failed\",\n    timestamp: new Date().toLocaleString()\n  };\n};\n\n/**\r\n * Convert Wei to Ether for display\r\n */\nexport const weiToEther = wei => {\n  // Handle undefined, null, or empty values\n  if (wei === undefined || wei === null || wei === \"\") {\n    return \"0\";\n  }\n  try {\n    // Convert to string safely\n    const weiString = wei.toString();\n\n    // Check if it's a valid number string\n    if (!/^\\d+$/.test(weiString)) {\n      console.warn(\"Invalid wei value:\", wei);\n      return \"0\";\n    }\n    return Web3.utils.fromWei(weiString, \"ether\");\n  } catch (error) {\n    console.error(\"Error converting wei to ether:\", error, \"Value:\", wei);\n    return \"0\";\n  }\n};\n\n/**\r\n * Convert Ether to Wei for transactions\r\n */\nexport const etherToWei = ether => {\n  return Web3.utils.toWei(ether.toString(), \"ether\");\n};\n\n/**\r\n * Validate Ethereum address\r\n */\nexport const isValidAddress = address => {\n  return Web3.utils.isAddress(address);\n};\n\n/**\r\n * Shorten address for display\r\n */\nexport const shortenAddress = address => {\n  if (!address) return \"\";\n  return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\n};\n\n/**\r\n * Format number for display\r\n */\nexport const formatNumber = (number, decimals = 2) => {\n  if (number === null || number === undefined) return \"0\";\n  return parseFloat(number.toString()).toFixed(decimals);\n};\n\n/**\r\n * Handle common Web3 errors\r\n */\nexport const handleWeb3Error = error => {\n  const err = error || {};\n  if (err.code === 4001) {\n    return \"Transaction cancelled by user\";\n  }\n  if (err.message && err.message.includes(\"insufficient funds\")) {\n    return \"Insufficient funds for transaction\";\n  }\n  if (err.message && err.message.includes(\"gas required exceeds allowance\")) {\n    return \"Transaction requires more gas than allowed\";\n  }\n  if (err.message && err.message.includes(\"revert\")) {\n    return \"Transaction reverted - check contract conditions\";\n  }\n  return err.message || \"Unknown blockchain error\";\n};\nexport default {\n  initWeb3,\n  getContract,\n  getAccounts,\n  getBalance,\n  getBlockchainInfo,\n  callContractFunction,\n  sendContractTransaction,\n  formatTransaction,\n  weiToEther,\n  etherToWei,\n  isValidAddress,\n  shortenAddress,\n  formatNumber,\n  handleWeb3Error\n};","map":{"version":3,"names":["Web3","GANACHE_URL","initWeb3","web3","window","ethereum","request","method","console","log","providers","HttpProvider","eth","net","isListening","error","Error","getContract","contractArtifact","networkId","getId","deployedNetwork","networks","toString","contract","Contract","abi","address","getAccounts","accounts","length","getBalance","balanceWei","balanceEther","utils","fromWei","wei","ether","formatted","parseFloat","toFixed","getBlockchainInfo","_latestBlock$nonce","_latestBlock$transact","networkUrl","currentProvider","host","latestBlock","getBlock","number","hash","timestamp","parentHash","nonce","transactionCount","transactions","miner","difficulty","gasLimit","gasUsed","size","Number","callContractFunction","functionName","params","fromAccount","result","methods","call","from","sendContractTransaction","value","_fullTransaction$gasP","_fullTransaction$valu","transaction","gasEstimate","estimateGas","receipt","send","gas","Math","floor","fullTransaction","getTransaction","transactionHash","blockNumber","gasPrice","status","to","undefined","transactionIndex","cumulativeGasUsed","logs","Date","now","formatTransaction","transactionData","block","toLocaleString","weiToEther","weiString","test","warn","etherToWei","toWei","isValidAddress","isAddress","shortenAddress","substring","formatNumber","decimals","handleWeb3Error","err","code","message","includes"],"sources":["C:/Users/ilias/OneDrive/Bureau/contract_test/client/src/utils/web3Utils.js"],"sourcesContent":["/**\r\n * WEB3 UTILITIES\r\n *\r\n * This file contains utility functions for connecting React frontend\r\n * to Ethereum blockchain via Web3.js\r\n */\r\n\r\nimport Web3 from \"web3\";\r\n\r\n// Ganache local blockchain configuration\r\nconst GANACHE_URL = \"http://127.0.0.1:7545\";\r\n\r\n/**\r\n * Initialize Web3 connection\r\n */\r\nexport const initWeb3 = async () => {\r\n  let web3;\r\n\r\n  // Check if MetaMask is available\r\n  if (window.ethereum) {\r\n    try {\r\n      // Request account access\r\n      await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n      web3 = new Web3(window.ethereum);\r\n\r\n      return web3;\r\n    } catch {\r\n      console.log(\"MetaMask connection rejected, falling back to Ganache\");\r\n      // Fall through to Ganache connection\r\n    }\r\n  }\r\n\r\n  // Fallback to Ganache local network\r\n  try {\r\n    web3 = new Web3(new Web3.providers.HttpProvider(GANACHE_URL));\r\n\r\n    // Test connection\r\n    await web3.eth.net.isListening();\r\n\r\n    return web3;\r\n  } catch (error) {\r\n    console.log(\"Failed to connect to Ganache:\", error);\r\n    throw new Error(\r\n      \"Cannot connect to blockchain. Make sure Ganache is running on port 7545\"\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Get contract instance from ABI and network info\r\n */\r\nexport const getContract = async (web3, contractArtifact) => {\r\n  try {\r\n    // Get current network ID\r\n    const networkId = await web3.eth.net.getId();\r\n\r\n    // Get contract deployment info for this network\r\n    const deployedNetwork = contractArtifact.networks[networkId.toString()];\r\n\r\n    if (!deployedNetwork) {\r\n      throw new Error(`Contract not deployed on network ${networkId}`);\r\n    }\r\n\r\n    // Create contract instance\r\n    const contract = new web3.eth.Contract(\r\n      contractArtifact.abi,\r\n      deployedNetwork.address\r\n    );\r\n\r\n    return {\r\n      contract,\r\n      address: deployedNetwork.address,\r\n      networkId: networkId.toString(),\r\n    };\r\n  } catch (error) {\r\n    console.log(\"Error loading contract:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get user accounts from blockchain\r\n */\r\nexport const getAccounts = async (web3) => {\r\n  try {\r\n    const accounts = await web3.eth.getAccounts();\r\n\r\n    if (accounts.length === 0) {\r\n      throw new Error(\"No accounts found. Make sure wallet is connected.\");\r\n    }\r\n\r\n    return accounts;\r\n  } catch (error) {\r\n    console.log(\"Error getting accounts:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get account balance in Ether\r\n */\r\nexport const getBalance = async (web3, address) => {\r\n  try {\r\n    // Get balance in Wei\r\n    const balanceWei = await web3.eth.getBalance(address);\r\n\r\n    // Convert Wei to Ether for display\r\n    const balanceEther = web3.utils.fromWei(balanceWei, \"ether\");\r\n\r\n    return {\r\n      wei: balanceWei.toString(),\r\n      ether: balanceEther,\r\n      formatted: `${parseFloat(balanceEther).toFixed(4)} ETH`,\r\n    };\r\n  } catch (error) {\r\n    console.log(\"Error getting balance:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get blockchain information\r\n */\r\nexport const getBlockchainInfo = async (web3) => {\r\n  try {\r\n    // Get network information\r\n    const networkId = await web3.eth.net.getId();\r\n\r\n    // Determine network URL based on current provider\r\n    let networkUrl = \"Unknown\";\r\n    if (\r\n      web3.currentProvider &&\r\n      typeof web3.currentProvider === \"object\" &&\r\n      \"host\" in web3.currentProvider\r\n    ) {\r\n      networkUrl = web3.currentProvider.host || \"Unknown\";\r\n    } else if (web3.currentProvider && typeof web3.currentProvider === \"string\") {\r\n      networkUrl = web3.currentProvider;\r\n    } else {\r\n      // Default for common networks\r\n      if (networkId.toString() === \"1337\" || networkId.toString() === \"5777\") {\r\n        networkUrl = \"http://127.0.0.1:7545\"; // Ganache\r\n      }\r\n    }\r\n\r\n    // Get latest block information with all details\r\n    const latestBlock = await web3.eth.getBlock(\"latest\", true); // true to get full transaction objects\r\n\r\n    return {\r\n      networkId: networkId.toString(),\r\n      networkUrl,\r\n      latestBlock: {\r\n        number: latestBlock?.number || 0,\r\n        hash: latestBlock?.hash || \"\",\r\n        timestamp: latestBlock?.timestamp || 0,\r\n        parentHash: latestBlock?.parentHash || \"\",\r\n        nonce: latestBlock?.nonce?.toString() || \"\",\r\n        transactionCount: latestBlock?.transactions?.length || 0,\r\n        miner: latestBlock?.miner || \"\",\r\n        difficulty: latestBlock?.difficulty || 0,\r\n        gasLimit: latestBlock?.gasLimit || 0,\r\n        gasUsed: latestBlock?.gasUsed || 0,\r\n        size: Number(latestBlock?.size || 0),\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.log(\"Error getting blockchain info:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Call contract function (read-only, no gas cost)\r\n */\r\nexport const callContractFunction = async (\r\n  contract,\r\n  functionName,\r\n  params = [],\r\n  fromAccount = null\r\n) => {\r\n  try {\r\n    const result = await contract.methods[functionName](...params).call({\r\n      from: fromAccount,\r\n    });\r\n\r\n    return result;\r\n  } catch (error) {\r\n    console.log(`Error calling contract function ${functionName}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Send transaction to contract (modifies state, costs gas)\r\n */\r\nexport const sendContractTransaction = async (\r\n  contract,\r\n  functionName,\r\n  params = [],\r\n  fromAccount,\r\n  value = 0\r\n) => {\r\n  try {\r\n    // Prepare transaction\r\n    const transaction = contract.methods[functionName](...params);\r\n\r\n    // Estimate gas needed\r\n    const gasEstimate = await transaction.estimateGas({\r\n      from: fromAccount,\r\n      value: value,\r\n    });\r\n\r\n    // Send transaction\r\n    const receipt = await transaction.send({\r\n      from: fromAccount,\r\n      gas: Math.floor(Number(gasEstimate) * 1.1),\r\n      value: value,\r\n    });\r\n\r\n    // Get full transaction details for display\r\n    const web3 = new Web3(\r\n      window.ethereum || new Web3.providers.HttpProvider(GANACHE_URL)\r\n    );\r\n    const fullTransaction = await web3.eth.getTransaction(\r\n      receipt.transactionHash\r\n    );\r\n\r\n    // Return formatted transaction data that matches TransactionDetails component expectations\r\n    return {\r\n      transactionHash: receipt.transactionHash,\r\n      blockNumber: receipt.blockNumber,\r\n      gasUsed: receipt.gasUsed,\r\n      gasPrice: fullTransaction?.gasPrice?.toString() || \"0\",\r\n      status: receipt.status,\r\n      from: receipt.from,\r\n      to: receipt.to,\r\n      value: fullTransaction?.value?.toString() || \"0\",\r\n      nonce: fullTransaction?.nonce ? Number(fullTransaction.nonce) : undefined,\r\n      transactionIndex: receipt.transactionIndex,\r\n      cumulativeGasUsed: receipt.cumulativeGasUsed,\r\n      logs: receipt.logs || [],\r\n      timestamp: Math.floor(Date.now() / 1000), // Current timestamp as fallback\r\n      // Keep the original receipt for backward compatibility\r\n      receipt,\r\n    };\r\n  } catch (error) {\r\n    console.log(\"Error sending transaction:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Format transaction for display\r\n */\r\nexport const formatTransaction = (transactionData) => {\r\n  if (!transactionData || !transactionData.receipt) {\r\n    return null;\r\n  }\r\n\r\n  const { receipt } = transactionData;\r\n\r\n  return {\r\n    hash: receipt.transactionHash,\r\n    block: receipt.blockNumber,\r\n    gasUsed: receipt.gasUsed.toString(),\r\n    status: receipt.status ? \"Success\" : \"Failed\",\r\n    timestamp: new Date().toLocaleString(),\r\n  };\r\n};\r\n\r\n/**\r\n * Convert Wei to Ether for display\r\n */\r\nexport const weiToEther = (wei) => {\r\n  // Handle undefined, null, or empty values\r\n  if (wei === undefined || wei === null || wei === \"\") {\r\n    return \"0\";\r\n  }\r\n\r\n  try {\r\n    // Convert to string safely\r\n    const weiString = wei.toString();\r\n\r\n    // Check if it's a valid number string\r\n    if (!/^\\d+$/.test(weiString)) {\r\n      console.warn(\"Invalid wei value:\", wei);\r\n      return \"0\";\r\n    }\r\n\r\n    return Web3.utils.fromWei(weiString, \"ether\");\r\n  } catch (error) {\r\n    console.error(\"Error converting wei to ether:\", error, \"Value:\", wei);\r\n    return \"0\";\r\n  }\r\n};\r\n\r\n/**\r\n * Convert Ether to Wei for transactions\r\n */\r\nexport const etherToWei = (ether) => {\r\n  return Web3.utils.toWei(ether.toString(), \"ether\");\r\n};\r\n\r\n/**\r\n * Validate Ethereum address\r\n */\r\nexport const isValidAddress = (address) => {\r\n  return Web3.utils.isAddress(address);\r\n};\r\n\r\n/**\r\n * Shorten address for display\r\n */\r\nexport const shortenAddress = (address) => {\r\n  if (!address) return \"\";\r\n  return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\r\n};\r\n\r\n/**\r\n * Format number for display\r\n */\r\nexport const formatNumber = (number, decimals = 2) => {\r\n  if (number === null || number === undefined) return \"0\";\r\n  return parseFloat(number.toString()).toFixed(decimals);\r\n};\r\n\r\n/**\r\n * Handle common Web3 errors\r\n */\r\nexport const handleWeb3Error = (error) => {\r\n  const err = error || {};\r\n\r\n  if (err.code === 4001) {\r\n    return \"Transaction cancelled by user\";\r\n  }\r\n\r\n  if (err.message && err.message.includes(\"insufficient funds\")) {\r\n    return \"Insufficient funds for transaction\";\r\n  }\r\n\r\n  if (err.message && err.message.includes(\"gas required exceeds allowance\")) {\r\n    return \"Transaction requires more gas than allowed\";\r\n  }\r\n\r\n  if (err.message && err.message.includes(\"revert\")) {\r\n    return \"Transaction reverted - check contract conditions\";\r\n  }\r\n\r\n  return err.message || \"Unknown blockchain error\";\r\n};\r\n\r\nexport default {\r\n  initWeb3,\r\n  getContract,\r\n  getAccounts,\r\n  getBalance,\r\n  getBlockchainInfo,\r\n  callContractFunction,\r\n  sendContractTransaction,\r\n  formatTransaction,\r\n  weiToEther,\r\n  etherToWei,\r\n  isValidAddress,\r\n  shortenAddress,\r\n  formatNumber,\r\n  handleWeb3Error,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}