{"ast":null,"code":"import Web3 from \"web3\";\n\n/**\r\n * Initializes Web3 instance using MetaMask or Ganache fallback\r\n */\nexport const initWeb3 = async () => {\n  let web3;\n  if (window.ethereum) {\n    web3 = new Web3(window.ethereum);\n    await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n  } else if (window.web3) {\n    web3 = new Web3(window.web3.currentProvider);\n  } else {\n    throw new Error(\"No Ethereum provider found. Please install MetaMask or run Ganache.\");\n  }\n  return web3;\n};\n\n/**\r\n * Given a Web3 instance and contract artifact JSON,\r\n * returns a contract instance connected to the deployed address on the current network.\r\n */\nexport const getContract = async (web3, artifact) => {\n  const networkId = await web3.eth.net.getId();\n  const deployedNetwork = artifact.networks[networkId];\n  if (!deployedNetwork) {\n    throw new Error(`Contract not deployed on network ID ${networkId}`);\n  }\n  const contractInstance = new web3.eth.Contract(artifact.abi, deployedNetwork.address);\n  return contractInstance;\n};","map":{"version":3,"names":["Web3","initWeb3","web3","window","ethereum","request","method","currentProvider","Error","getContract","artifact","networkId","eth","net","getId","deployedNetwork","networks","contractInstance","Contract","abi","address"],"sources":["C:/Users/ilias/OneDrive/Bureau/contract_test/client/src/utils/web3Utils.js"],"sourcesContent":["import Web3 from \"web3\";\r\n\r\n/**\r\n * Initializes Web3 instance using MetaMask or Ganache fallback\r\n */\r\nexport const initWeb3 = async () => {\r\n  let web3;\r\n\r\n  if (window.ethereum) {\r\n    web3 = new Web3(window.ethereum);\r\n    await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n  } else if (window.web3) {\r\n    web3 = new Web3(window.web3.currentProvider);\r\n  } else {\r\n    throw new Error(\r\n      \"No Ethereum provider found. Please install MetaMask or run Ganache.\"\r\n    );\r\n  }\r\n\r\n  return web3;\r\n};\r\n\r\n/**\r\n * Given a Web3 instance and contract artifact JSON,\r\n * returns a contract instance connected to the deployed address on the current network.\r\n */\r\nexport const getContract = async (web3, artifact) => {\r\n  const networkId = await web3.eth.net.getId();\r\n  const deployedNetwork = artifact.networks[networkId];\r\n\r\n  if (!deployedNetwork) {\r\n    throw new Error(`Contract not deployed on network ID ${networkId}`);\r\n  }\r\n\r\n  const contractInstance = new web3.eth.Contract(\r\n    artifact.abi,\r\n    deployedNetwork.address\r\n  );\r\n\r\n  return contractInstance;\r\n};\r\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;;AAEvB;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAIC,IAAI;EAER,IAAIC,MAAM,CAACC,QAAQ,EAAE;IACnBF,IAAI,GAAG,IAAIF,IAAI,CAACG,MAAM,CAACC,QAAQ,CAAC;IAChC,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;MAAEC,MAAM,EAAE;IAAsB,CAAC,CAAC;EAClE,CAAC,MAAM,IAAIH,MAAM,CAACD,IAAI,EAAE;IACtBA,IAAI,GAAG,IAAIF,IAAI,CAACG,MAAM,CAACD,IAAI,CAACK,eAAe,CAAC;EAC9C,CAAC,MAAM;IACL,MAAM,IAAIC,KAAK,CACb,qEACF,CAAC;EACH;EAEA,OAAON,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMO,WAAW,GAAG,MAAAA,CAAOP,IAAI,EAAEQ,QAAQ,KAAK;EACnD,MAAMC,SAAS,GAAG,MAAMT,IAAI,CAACU,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;EAC5C,MAAMC,eAAe,GAAGL,QAAQ,CAACM,QAAQ,CAACL,SAAS,CAAC;EAEpD,IAAI,CAACI,eAAe,EAAE;IACpB,MAAM,IAAIP,KAAK,CAAC,uCAAuCG,SAAS,EAAE,CAAC;EACrE;EAEA,MAAMM,gBAAgB,GAAG,IAAIf,IAAI,CAACU,GAAG,CAACM,QAAQ,CAC5CR,QAAQ,CAACS,GAAG,EACZJ,eAAe,CAACK,OAClB,CAAC;EAED,OAAOH,gBAAgB;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}